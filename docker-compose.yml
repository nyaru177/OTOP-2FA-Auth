services:
  app:
    build: .
    container_name: auth-system-app
    ports:
      - "3020:3020"
    environment:
      MYSQL_HOST: mysql-container
      MYSQL_USER: root
      MYSQL_PASSWORD: rootpassword
      MYSQL_DATABASE: identification
      REDIS_HOST: redis-container  # 使用固定的 IP 地址
    depends_on:
      - mysql
      - redis
    networks:
      auth-network:
        ipv4_address: 172.18.0.4  # 你也可以为 app 容器指定固定 IP

  mysql:
    image: mysql:8.0
    container_name: mysql-container
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: identification
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./db_init:/docker-entrypoint-initdb.d  # 自动初始化数据库
    networks:
      auth-network:
        ipv4_address: 172.18.0.2  # 为 mysql 容器指定固定 IP
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "--host=localhost", "--user=root", "--password=rootpassword"]
      interval: 30s
      retries: 5
      start_period: 5s
      timeout: 10s

  redis:
    image: redis:latest
    container_name: redis-container
    ports:
      - "6379:6379"
    networks:
      auth-network:
        ipv4_address: 172.18.0.3  # 为 redis 容器指定固定 IP
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      retries: 5
      start_period: 5s
      timeout: 10s

networks:
  auth-network:
    driver: bridge
    name: auth-network
    ipam:
      config:
        - subnet: 172.18.0.0/16  # 子网范围
          gateway: 172.18.0.1

volumes:
  mysql-data:
    driver: local
